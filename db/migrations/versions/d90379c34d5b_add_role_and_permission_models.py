"""Add role and permission models

Revision ID: d90379c34d5b
Revises: 5cf5a4f8f0b2
Create Date: 2025-07-09 18:57:34.356664

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd90379c34d5b'
down_revision: Union[str, None] = '5cf5a4f8f0b2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('employers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('tg_users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('telegram_id', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('telegram_id')
    )
    op.create_table('app_users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tg_user_id', sa.UUID(), nullable=False),
    sa.Column('employer_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('last_seen', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['employer_id'], ['employers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tg_user_id'], ['tg_users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.drop_table('users')
    op.add_column('books', sa.Column('id', sa.UUID(), nullable=False))
    op.alter_column('books', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('books', 'owner_id',
               existing_type=sa.BIGINT(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('books', 'location_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_constraint('books_owner_id_fkey', 'books', type_='foreignkey')
    op.drop_constraint('books_location_id_fkey', 'books', type_='foreignkey')
    op.create_foreign_key(None, 'books', 'app_users', ['owner_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'books', 'locations', ['location_id'], ['id'], ondelete='CASCADE')
    op.drop_column('books', 'book_id')
    op.alter_column('books_categories', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('books_categories', 'book_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_constraint('books_categories_book_id_fkey', 'books_categories', type_='foreignkey')
    op.create_foreign_key(None, 'books_categories', 'books', ['book_id'], ['id'], ondelete='CASCADE')
    op.add_column('locations', sa.Column('id', sa.UUID(), nullable=False))
    op.drop_column('locations', 'location_id')
    op.add_column('orders', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('orders', sa.Column('app_user_id', sa.UUID(), nullable=False))
    op.alter_column('orders', 'book_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('orders', 'taken_from_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('orders', 'returned_to_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.drop_constraint('orders_telegram_id_fkey', 'orders', type_='foreignkey')
    op.drop_constraint('orders_taken_from_id_fkey', 'orders', type_='foreignkey')
    op.drop_constraint('orders_book_id_fkey', 'orders', type_='foreignkey')
    op.drop_constraint('orders_returned_to_id_fkey', 'orders', type_='foreignkey')
    op.create_foreign_key(None, 'orders', 'app_users', ['app_user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'orders', 'locations', ['taken_from_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'orders', 'books', ['book_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'orders', 'locations', ['returned_to_id'], ['id'], ondelete='SET NULL')
    op.drop_column('orders', 'telegram_id')
    op.drop_column('orders', 'order_id')
    op.add_column('wishlists', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('wishlists', sa.Column('app_user_id', sa.UUID(), nullable=False))
    op.drop_constraint('wishlists_user_id_fkey', 'wishlists', type_='foreignkey')
    op.create_foreign_key(None, 'wishlists', 'app_users', ['app_user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('wishlists', 'wish_list_id')
    op.drop_column('wishlists', 'user_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('wishlists', sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('wishlists', sa.Column('wish_list_id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'wishlists', type_='foreignkey')
    op.create_foreign_key('wishlists_user_id_fkey', 'wishlists', 'users', ['user_id'], ['telegram_id'], ondelete='CASCADE')
    op.drop_column('wishlists', 'app_user_id')
    op.drop_column('wishlists', 'id')
    op.add_column('orders', sa.Column('order_id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('orders', sa.Column('telegram_id', sa.BIGINT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.drop_constraint(None, 'orders', type_='foreignkey')
    op.create_foreign_key('orders_returned_to_id_fkey', 'orders', 'locations', ['returned_to_id'], ['location_id'], ondelete='SET NULL')
    op.create_foreign_key('orders_book_id_fkey', 'orders', 'books', ['book_id'], ['book_id'], ondelete='CASCADE')
    op.create_foreign_key('orders_taken_from_id_fkey', 'orders', 'locations', ['taken_from_id'], ['location_id'], ondelete='SET NULL')
    op.create_foreign_key('orders_telegram_id_fkey', 'orders', 'users', ['telegram_id'], ['telegram_id'], ondelete='CASCADE')
    op.alter_column('orders', 'returned_to_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('orders', 'taken_from_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('orders', 'book_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('orders', 'app_user_id')
    op.drop_column('orders', 'id')
    op.add_column('locations', sa.Column('location_id', sa.INTEGER(), server_default=sa.text("nextval('locations_location_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.drop_column('locations', 'id')
    op.drop_constraint(None, 'books_categories', type_='foreignkey')
    op.create_foreign_key('books_categories_book_id_fkey', 'books_categories', 'books', ['book_id'], ['book_id'], ondelete='CASCADE')
    op.alter_column('books_categories', 'book_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('books_categories', 'id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.add_column('books', sa.Column('book_id', sa.INTEGER(), server_default=sa.text("nextval('books_book_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'books', type_='foreignkey')
    op.drop_constraint(None, 'books', type_='foreignkey')
    op.create_foreign_key('books_location_id_fkey', 'books', 'locations', ['location_id'], ['location_id'], ondelete='CASCADE')
    op.create_foreign_key('books_owner_id_fkey', 'books', 'users', ['owner_id'], ['telegram_id'], ondelete='CASCADE')
    op.alter_column('books', 'location_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.alter_column('books', 'owner_id',
               existing_type=sa.UUID(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('books', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('books', 'id')
    op.create_table('users',
    sa.Column('telegram_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('surname', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('telegram_id', name='users_pkey')
    )
    op.drop_table('role_permissions')
    op.drop_table('app_users')
    op.drop_table('tg_users')
    op.drop_table('roles')
    op.drop_table('permissions')
    op.drop_table('employers')
    # ### end Alembic commands ###
